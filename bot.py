# bot.py
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Flask –¥–ª—è Render
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –ò–ò-—è–¥—Ä–æ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ===
# (–ë–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
def generate_search_query(user_message: str) -> str:
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Llama/OpenRouter –ø–æ–∑–∂–µ)
    query = user_message.lower()
    keywords = []

    if any(word in query for word in ["–Ω–∞—É—à–Ω–∏–∫–∏", "earbuds", "earphones"]):
        keywords.append("–Ω–∞—É—à–Ω–∏–∫–∏")
    if any(word in query for word in ["–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ", "wireless", "bluetooth"]):
        keywords.append("–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ")
    if any(word in query for word in ["–¥–ª—è –±–µ–≥–∞", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ", "–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ", "–≤–æ–¥–æ–∑–∞—â–∏—Ç–Ω—ã–µ"]):
        keywords.append("–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ")
    if any(word in query for word in ["–Ω–µ–¥–æ—Ä–æ–≥–∏–µ", "–¥–µ—à—ë–≤—ã–µ", "–±—é–¥–∂–µ—Ç–Ω—ã–µ"]):
        keywords.append("–¥–æ 3000")
    if any(word in query for word in ["—Å –ª—É—á—à–∏–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏", "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ", "—Ç–æ–ø"]):
        keywords.append("–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ")

    # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—á–∏—Å—Ç–∏–º
    if not keywords:
        keywords = [word for word in query.split() if len(word) > 3]

    return " ".join(keywords) if keywords else "—Ç–æ–≤–∞—Ä—ã"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="start_chat")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *—É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫* –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ *—Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ*.\n\n"
        "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ *–ò—â—É –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –±–µ–≥–∞*\n"
        "‚Ä¢ *–ù—É–∂–Ω—ã –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –ø–∞—Ä–Ω—è –¥–æ 5000‚ÇΩ*\n\n"
        "–Ø –≤—Å—ë —É—Ç–æ—á–Ω—é –∏ –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    if len(user_message) < 2:
        await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
    search_query = generate_search_query(user_message)
    encoded_query = urllib.parse.quote(search_query)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    wb_link = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}&sort=popular&rating=4.7"

    # –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    message = (
        "üîç –Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ: *{query}*\n\n"
        "üèÜ –í–æ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Wildberries:\n"
        "‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏\n"
        "‚≠ê –†–µ–π—Ç–∏–Ω–≥: –æ—Ç 4.7\n"
        "üí¨ –ú–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤\n\n"
        "üõí [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º]({link})"
    ).format(query=search_query, link=wb_link)

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=False)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    keep_alive()

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
        app.run_polling()
