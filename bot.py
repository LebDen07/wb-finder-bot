# bot.py
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_LINK = "https://t.me/+uGrNl01GXGI4NjI6"

if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚ú® –ë–æ—Ç –¥–ª—è Wildberries —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int, keep_last: int = 2):
    if "message_ids" not in context.user_data:
        return
    message_ids = context.user_data["message_ids"]
    to_delete = message_ids[:-keep_last] if len(message_ids) > keep_last else message_ids
    for msg_id in to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")
    context.user_data["message_ids"] = message_ids[-keep_last:]

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def save_message_id(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int):
    if "message_ids" not in context.user_data:
        context.user_data["message_ids"] = []
    context.user_data["message_ids"].append(message_id)

# === –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, chat_id, keep_last=0)

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.5)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 1
    msg = await context.bot.send_message(chat_id=chat_id, text="üí´")
    await save_message_id(context, chat_id, msg.message_id)
    await asyncio.sleep(0.5)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 2
    msg = await context.bot.send_message(chat_id=chat_id, text="üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤...")
    await save_message_id(context, chat_id, msg.message_id)
    await asyncio.sleep(1.0)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 3 ‚Äî —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "üåü *–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç –≤ –†–æ—Å—Å–∏–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ WB*\n\n"
            "üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:\n"
            "[*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
            "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏! üî•"
        ),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await save_message_id(context, chat_id, msg.message_id)
    await asyncio.sleep(1.8)

    # –ö–Ω–æ–ø–∫–∞
    keyboard = [
        [InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await context.bot.send_message(
        chat_id=chat_id,
        text="üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤?",
        reply_markup=reply_markup
    )
    await save_message_id(context, chat_id, msg.message_id)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    chat_id = query.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, chat_id, keep_last=0)

    if query.data == "start_searching":
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1.2)

        msg = await context.bot.send_message(
            chat_id=chat_id,
            text="üîç *–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries:*",
            parse_mode="Markdown"
        )
        await save_message_id(context, chat_id, msg.message_id)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    chat_id = update.effective_chat.id

    if len(query) < 2:
        msg = await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        await save_message_id(context, chat_id, msg.message_id)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, chat_id, keep_last=0)

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.5)

    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=f"üîç *–ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è:* `{query}`",
        parse_mode="Markdown"
    )
    await save_message_id(context, chat_id, msg.message_id)

    # –ï—â—ë —ç—Ñ—Ñ–µ–∫—Ç
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.8)

    # –ö–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üèÜ 1. –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂", callback_data=f"tip|{query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏")],
        [InlineKeyboardButton("üíé 2. –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ", callback_data=f"tip|{query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –¥–æ—Ä–æ–≥–∏—Ö")],
        [InlineKeyboardButton("üí∞ 3. –°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ", callback_data=f"tip|{query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –¥–µ—à—ë–≤—ã—Ö")],
        [InlineKeyboardButton("‚≠ê 4. –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f"tip|{query}|–§–∏–ª—å—Ç—Ä: —Ä–µ–π—Ç–∏–Ω–≥ 4.9+")],
        [InlineKeyboardButton("üî• 5. –•–∏—Ç —Å–µ–∑–æ–Ω–∞", callback_data=f"tip|{query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ + –†–æ—Å—Å–∏—è")],
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", callback_data="start_searching")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await context.bot.send_message(
        chat_id=chat_id,
        text=f"üéØ *–ö–∞–∫ –∏—Å–∫–∞—Ç—å ¬´{query}¬ª –Ω–∞ Wildberries:*\n\n"
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    await save_message_id(context, chat_id, msg.message_id)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≤–µ—Ç–æ–≤ ===
async def tip_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # tip|–∑–∞–ø—Ä–æ—Å|—Å–æ–≤–µ—Ç
    parts = data.split("|", 2)
    if len(parts) != 3:
        return

    search_query, tip = parts[1], parts[2]
    chat_id = query.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, chat_id, keep_last=0)

    instruction = (
        f"üîç *–ö–∞–∫ –Ω–∞–π—Ç–∏ ¬´{search_query}¬ª –Ω–∞ Wildberries:*\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ [Wildberries](https://www.wildberries.ru)\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–∏—Å–∫–µ: `{search_query}`\n"
        f"3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä: *{tip}*\n"
        f"4. –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–º–µ–Ω–∏—Ç—å¬ª\n\n"
        f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await query.edit_message_text(instruction, parse_mode="Markdown", reply_markup=reply_markup)
    await save_message_id(context, chat_id, msg.message_id)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" ===
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(context, chat_id, keep_last=0)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        search_query = query.message.text.split("¬´")[1].split("¬ª")[0]
    except:
        search_query = "—Ç–æ–≤–∞—Ä"

    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üèÜ 1. –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂", callback_data=f"tip|{search_query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏")],
        [InlineKeyboardButton("üíé 2. –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ", callback_data=f"tip|{search_query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –¥–æ—Ä–æ–≥–∏—Ö")],
        [InlineKeyboardButton("üí∞ 3. –°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ", callback_data=f"tip|{search_query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –¥–µ—à—ë–≤—ã—Ö")],
        [InlineKeyboardButton("‚≠ê 4. –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data=f"tip|{search_query}|–§–∏–ª—å—Ç—Ä: —Ä–µ–π—Ç–∏–Ω–≥ 4.9+")],
        [InlineKeyboardButton("üî• 5. –•–∏—Ç —Å–µ–∑–æ–Ω–∞", callback_data=f"tip|{search_query}|–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ + –†–æ—Å—Å–∏—è")],
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", callback_data="start_searching")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await query.edit_message_text(
        text=f"üéØ *–ö–∞–∫ –∏—Å–∫–∞—Ç—å ¬´{search_query}¬ª –Ω–∞ Wildberries:*\n\n"
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é.",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    await save_message_id(context, chat_id, msg.message_id)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –•—ç–Ω–¥–ª–µ—Ä—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler, pattern="^start_searching$"))
        app.add_handler(CallbackQueryHandler(tip_handler, pattern="^tip\\|"))
        app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
