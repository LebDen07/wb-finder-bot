# wb_finder_bot.py
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re

# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8359908342:AAFT5jgAHvDo5wnuZqZEM1A4OkboU4TE4IU"  # üî• –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π!
SEARCH_BASE = "https://www.wildberries.ru/catalog/0/search.aspx?search="

# üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
def create_driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # —Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option("useAutomationExtension", False)
    driver = webdriver.Chrome(options=options)
    driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => false});")
    return driver

# üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã –∏ –æ—Ç–∑—ã–≤–æ–≤
def parse_price_and_reviews(product):
    price = None
    reviews = 0

    # üí∞ –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
    try:
        main_price_elem = product.find_element(By.XPATH, './/span[contains(@class, "price") and not(contains(@class, "old"))]')
        price_text = main_price_elem.text.strip()
        price_match = re.search(r'\d+', price_text.replace(' ', ''))
        if price_match:
            price = int(price_match.group())
    except:
        pass

    if not price:
        try:
            all_prices = product.find_elements(By.XPATH, './/span[contains(text(), "‚ÇΩ")]')
            for el in all_prices:
                txt = el.text.strip()
                match = re.search(r'\d+', txt.replace(' ', ''))
                if match:
                    price = int(match.group())
                    break
        except:
            pass

    # ‚≠ê –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ ‚Äî –∏—â–µ–º –ø–æ –≤—Å–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    try:
        # –í–∞—Ä–∏–∞–Ω—Ç 1: REVMT –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –æ—Ç–∑—ã–≤–∞–º–∏
        review_elements = product.find_elements(By.XPATH,
            './/span[contains(text(), "–æ—Ç–∑—ã–≤") or contains(text(), "review") or contains(text(), "REVMT")] | '
            './/div[contains(text(), "–æ—Ç–∑—ã–≤") or contains(text(), "review") or contains(text(), "REVMT")]'
        )
        for el in review_elements:
            text = el.text.strip()
            match = re.search(r'\d+', text)
            if match:
                reviews = int(match.group())
                break

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ –∫–ª–∞—Å—Å—É (count, reviews)
        if reviews == 0:
            count_elems = product.find_elements(By.XPATH,
                './/*[contains(@class, "count") or contains(@class, "reviews") or contains(@class, "revmt")]'
            )
            for el in count_elems:
                text = el.get_attribute("textContent").strip()
                match = re.search(r'\d+', text)
                if match:
                    reviews = int(match.group())
                    break

        # –í–∞—Ä–∏–∞–Ω—Ç 3: data-count
        if reviews == 0:
            try:
                data_count = product.get_attribute("data-count")
                if data_count and data_count.isdigit():
                    reviews = int(data_count)
            except:
                pass

        # –í–∞—Ä–∏–∞–Ω—Ç 4: REVMT –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        if reviews == 0:
            full_text = product.text
            match = re.search(r'REVMT\D*(\d+)', full_text, re.IGNORECASE)
            if match:
                reviews = int(match.group(1))

    except Exception as e:
        pass

    return price, reviews

# üîé –ü–æ–∏—Å–∫ –Ω–∞ Wildberries
def search_wb(query: str) -> list:
    driver = create_driver()
    results = []
    url = SEARCH_BASE + query.replace(" ", "+")
    
    try:
        driver.get(url)
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "article.product-card"))
        )
        products = driver.find_elements(By.CSS_SELECTOR, "article.product-card")
        
        for product in products[:20]:
            try:
                link_elem = product.find_element(By.CSS_SELECTOR, "a[href*='/catalog/']")
                name = link_elem.get_attribute("aria-label")
                if not name or len(name) > 100 or "–¥–æ—Å—Ç–∞–≤–∫–∞" in name.lower():
                    continue

                # –ü–µ—Ä–µ–¥–∞—ë–º –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
                price, reviews = parse_price_and_reviews(product)

                if not price:
                    continue

                link = link_elem.get_attribute("href")

                results.append({
                    "name": name,
                    "price": price,
                    "reviews": reviews,
                    "link": link
                })
            except Exception as e:
                continue

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –±–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ ‚Üí –¥–µ—à–µ–≤–ª–µ
        results.sort(key=lambda x: (-x["reviews"], x["price"]))

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    finally:
        driver.quit()

    return results[:5]

# ü§ñ –ö–æ–º–∞–Ω–¥–∞ /start —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, —Å—Å—ã–ª–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–Ω–æ–ø–∫–∞
    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –¢–µ–∫—Å—Ç —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º! üî•\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# ü§ñ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

# ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    await update.message.reply_text(
        f"üî• [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        f"–ò—â—É: *{query}*",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    results = search_wb(query)

    if results:
        message = "üèÜ *–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, (r['reviews'] // 50)))
            message += (
                f"{i}. *{r['name']}*\n"
                f"   üí∞ {r['price']:,.0f} ‚ÇΩ  |  {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤  {stars}\n"
                f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})\n\n"
            )
    else:
        message = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É...")
    app.run_polling()
