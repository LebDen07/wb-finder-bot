# bot.py
import os
import sys
import requests
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print(f"üêç Python: {sys.version}")

# –¢–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    sys.exit(1)

# === Flask –¥–ª—è keep-alive ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    port = int(os.getenv('PORT', 10000))
    app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()

# === –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî —Å —Ñ–æ–ª–±—ç–∫–æ–º ===
def search_wb(query: str) -> list:
    if not query.strip():
        return []  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞

    keyword = urllib.parse.quote(query.strip())
    logger.info(f"üîç –ü–æ–∏—Å–∫: '{query}'")

    # üîÅ –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    urls = [
        f"https://catalog.wb.ru/catalog/autosearch/data?query={keyword}&dest=-1257786&lang=ru&curr=rub",
        f"https://catalog.wb.ru/catalog/electronics/catalog?keyword={keyword}&dest=-1257786&sort=popular",
        f"https://search.wb.ru/exactmatch/ru/common/v4/search?query={keyword}&dest=-1257786&resultset=items"
    ]

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        "Accept": "application/json",
        "Referer": "https://www.wildberries.ru/",
        "Origin": "https://www.wildberries.ru",
        "X-Requested-With": "XMLHttpRequest"
    }

    for i, url in enumerate(urls, 1):
        try:
            logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {i}: GET {url}")
            response = requests.get(url, headers=headers, timeout=10)

            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                logger.info(f"üì¶ JSON –ø–æ–ª—É—á–µ–Ω: {len(str(data))}
