# bot.py
import os
import sys
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
 format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
 level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
print(f"üêç Python: {sys.version}")

# –¢–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
 logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
 sys.exit(1)

# === Flask –¥–ª—è keep-alive ===
app_flask = Flask('')

@app_flask.route('/')
def home():
 return "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
 port = int(os.getenv('PORT', 10000))
 app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
 t = Thread(target=run_flask, daemon=True)
 t.start()

# === –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è URL ===
def url_encode(query: str) -> str:
 return urllib.parse.quote(query.strip())

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
 keyboard = InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")
 reply_markup = InlineKeyboardMarkup(keyboard)

 await update.message.reply_text(
 "üéâ *–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
 "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
 "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
 "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
 "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
 "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: *–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n"
 "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º üî•\n\n"
 "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
 parse_mode="Markdown",
 disable_web_page_preview=True,
 reply_markup=reply_markup
 )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
 query = update.callback_query
 await query.answer()
 if query.data == "start_searching":
 

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
 query = update.message.text.strip()
 if len(query) < 2:
 await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
 return

 # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
 encoded_query = url_encode(query)
 # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ Wildberries
 wb_url = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}"

 # –ö–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π
 keyboard = InlineKeyboardButton("üõç –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", url=wb_url)
 reply_markup = InlineKeyboardMarkup(keyboard)

 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
 await update.message.reply_text(
 f"üî• *–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n\n"
 f"üîç –í—ã –∏—Å–∫–∞–ª–∏: *{query}*\n\n"
 f"‚úÖ –í–æ—Ç –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî\n"
 f"—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —Å–∫–∏–¥–∫–∏ –∏ –æ—Ç–∑—ã–≤—ã üíØ",
 parse_mode="Markdown",
 disable_web_page_preview=True,
 reply_markup=reply_markup
 )

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
 keep_alive()

 logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
 application = Application.builder().token(TOKEN).build()

 application.add_handler(CommandHandler("start", start))
 application.add_handler(CallbackQueryHandler(button_handler))
 application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

 logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

 try:
 asyncio.run(application.run_polling())
 except KeyboardInterrupt:
 logger.info("üí§ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
 except Exception as e:
 logger.critical(f"üí• –û—à–∏–±–∫–∞: {e}")

