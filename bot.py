# bot.py
import os
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –î–ª—è –ò–ò

if not TELEGRAM_TOKEN:
    logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã Render –Ω–µ "—É–±–∏–ª" –ø—Ä–æ—Ü–µ—Å—Å) ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ===
CATEGORIES = {
    "üéß –ù–∞—É—à–Ω–∏–∫–∏": "–Ω–∞—É—à–Ω–∏–∫–∏",
    "üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏",
    "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω",
    "‚åö –ß–∞—Å—ã": "—á–∞—Å—ã",
    "üéí –†—é–∫–∑–∞–∫–∏": "—Ä—é–∫–∑–∞–∫"
}

BUDGETS = ["–¥–æ 1000‚ÇΩ", "–¥–æ 3000‚ÇΩ", "–¥–æ 5000‚ÇΩ", "–¥–æ 10000‚ÇΩ"]
RATINGS = ["–æ—Ç 4.5", "–æ—Ç 4.7", "–æ—Ç 4.8"]

# === –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ (mock) ‚Äî –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API –ø–æ–∑–∂–µ ===
MOCK_PRODUCTS = [
    {
        "title": "–ù–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ Sony WF-C500",
        "price": "4 999 ‚ÇΩ",
        "rating": "4.8",
        "reviews": "247",
        "image": "https://cf1.wbstatic.net/big/new/12345678/1.jpg",
        "url": "https://www.wildberries.ru/catalog/12345678/detail.aspx"
    },
    {
        "title": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ Nike Air Zoom Pegasus",
        "price": "7 499 ‚ÇΩ",
        "rating": "4.9",
        "reviews": "189",
        "image": "https://cf1.wbstatic.net/big/new/87654321/1.jpg",
        "url": "https://www.wildberries.ru/catalog/87654321/detail.aspx"
    },
    {
        "title": "–°–º–∞—Ä—Ç—Ñ–æ–Ω Xiaomi Redmi Note 13 Pro",
        "price": "12 999 ‚ÇΩ",
        "rating": "4.7",
        "reviews": "312",
        "image": "https://cf1.wbstatic.net/big/new/24681357/1.jpg",
        "url": "https://www.wildberries.ru/catalog/24681357/detail.aspx"
    }
]

# === –î–∏–∞–ª–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_state = {}

# === –ó–∞–ø—Ä–æ—Å –∫ –ò–ò —á–µ—Ä–µ–∑ OpenRouter ===
def ai_query(prompt: str) -> dict:
    if not OPENROUTER_API_KEY:
        return {"query": prompt, "budget": "–¥–æ 5000‚ÇΩ", "rating": "4.7"}
    
    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "qwen/qwen2.5-7b-instruct",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries. –ò–∑–≤–ª–µ–∫–∏: —á—Ç–æ –∏—â–µ—Ç, –±—é–¥–∂–µ—Ç, —Ä–µ–π—Ç–∏–Ω–≥. –í–µ—Ä–Ω–∏ JSON: {query, budget, rating}"},
                    {"role": "user", "content": prompt}
                ]
            },
            timeout=15
        )
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ JSON (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.loads)
        return eval(content) if "query" in content else {"query": prompt, "budget": "–¥–æ 5000‚ÇΩ", "rating": "4.7"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
        return {"query": prompt, "budget": "–¥–æ 5000‚ÇΩ", "rating": "4.7"}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ Wildberries ===
def make_wb_link(query: str, rating: str = "4.7") -> str:
    encoded_query = urllib.parse.quote(query)
    min_rating = rating.replace("–æ—Ç ", "")
    return f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}&sort=popular&rating={min_rating}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = {"step": "start"}

    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{key}")] for key, cat in CATEGORIES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üõí *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    if data.startswith("cat_"):
        search_query = data.replace("cat_", "")
        user_state[user_id]["query"] = search_query
        user_state[user_id]["step"] = "budget"

        keyboard = [[InlineKeyboardButton(budg, callback_data=f"budg_{budg}")] for budg in BUDGETS]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã –∏—â–µ—Ç–µ: *{search_query}*\n\n–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=reply_markup, parse_mode="Markdown")

    elif data.startswith("budg_"):
        budget = data.replace("budg_", "")
        user_state[user_id]["budget"] = budget
        user_state[user_id]["step"] = "rating"

        keyboard = [[InlineKeyboardButton(rat, callback_data=f"rat_{rat}")] for rat in RATINGS]
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rat_–æ—Ç 4.5")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:", reply_markup=reply_markup, parse_mode="Markdown")

    elif data.startswith("rat_"):
        rating = data.replace("rat_", "")
        user_state[user_id]["rating"] = rating
        final_query = user_state[user_id]["query"]
        full_query = f"{final_query} {user_state[user_id]['budget']}".strip()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        wb_link = make_wb_link(full_query, rating)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ò—â—É..."
        await query.edit_message_text("üîç *–ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...*", parse_mode="Markdown")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mock-—Ç–æ–≤–∞—Ä—ã
        for product in MOCK_PRODUCTS:
            if final_query.lower() in product["title"].lower():
                caption = (
                    f"üõçÔ∏è *{product['title']}*\n"
                    f"üí∞ –¶–µ–Ω–∞: *{product['price']}*\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: *{product['rating']}* ({product['reviews']} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
                    f"[üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product['url']})"
                )
                try:
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=product["image"],
                        caption=caption,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )
                except:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=caption,
                        parse_mode="Markdown",
                        disable_web_page_preview=True
                    )

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
        keyboard = [[InlineKeyboardButton("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞ Wildberries", url=wb_link)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –í–æ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ?",
            reply_markup=reply_markup
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—á–µ—Ä–µ–∑ –ò–ò) ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if len(text) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    ai_result = ai_query(text)
    query = ai_result.get("query", text)
    budget = ai_result.get("budget", "–¥–æ 5000‚ÇΩ")
    rating = ai_result.get("rating", "4.7")

    full_query = f"{query} {budget}"
    wb_link = make_wb_link(query, rating)

    await update.message.reply_text(
        f"üîç *–ò—â—É:* `{full_query}`\n"
        f"‚≠ê *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:* `{rating}`",
        parse_mode="Markdown"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mock-—Ç–æ–≤–∞—Ä—ã
    for product in MOCK_PRODUCTS:
        if query.lower() in product["title"].lower():
            caption = (
                f"üõçÔ∏è *{product['title']}*\n"
                f"üí∞ –¶–µ–Ω–∞: *{product['price']}*\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: *{product['rating']}* ({product['reviews']} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
                f"[üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({product['url']})"
            )
            try:
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=product["image"],
                    caption=caption,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )
            except:
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text=caption,
                    parse_mode="Markdown",
                    disable_web_page_preview=True
                )

    # –ö–Ω–æ–ø–∫–∞
    keyboard = [[InlineKeyboardButton("üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞ Wildberries", url=wb_link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="‚úÖ –í–æ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!",
        reply_markup=reply_markup
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
