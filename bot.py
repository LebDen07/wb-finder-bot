# bot.py
import os
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run_flask():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run_flask)
    t.start()

# –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API Wildberries
def search_wb(query: str) -> list:
    url = "https://search.wb.ru/exactmatch/ru/common/v4/search"
    params = {"query": query, "resultset": "catalog", "limit": 20}
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        resp = requests.get(url, params=params, headers=headers, timeout=10)
        data = resp.json()
        products = data.get("data", {}).get("products", [])
        results = []
        for p in products[:20]:
            price = p.get("salePriceU", 0) // 100
            reviews = p.get("reviewCount", 0)
            name = p.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            link = f"https://www.wildberries.ru/catalog/{p['id']}/detail.aspx"
            if len(name) > 100 or "–¥–æ—Å—Ç–∞–≤–∫–∞" in name.lower():
                continue
            results.append({"name": name, "price": price, "reviews": reviews, "link": link})
        results.sort(key=lambda x: (-x["reviews"], x["price"]))
        return results[:5]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# –ö–Ω–æ–ø–∫–∞
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_searching":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return
    await update.message.reply_text(f"üîç –ò—â—É: *{query}*", parse_mode="Markdown")
    results = search_wb(query)
    if results:
        message = "üèÜ *–¢–æ–ø-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
            message += f"{i}. *{r['name']}*\n   üí∞ {r['price']:,} ‚ÇΩ | {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤ {stars}\n   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})\n\n"
    else:
        message = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    if not TOKEN:
        logger.error("‚ùó –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!")
        app.run_polling()