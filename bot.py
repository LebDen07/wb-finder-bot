# bot.py
import os
import sys
import requests
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python ‚Äî –ø–æ–º–æ–∂–µ—Ç –≤ –ª–æ–≥–∞—Ö
print(f"üêç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python: {sys.version}")
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("‚ùó –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.")
    sys.exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive (—á—Ç–æ–±—ã Render –Ω–µ "—É—Å—ã–ø–ª—è–ª" —Å–µ—Ä–≤–∏—Å) ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç Wildberries Search Bot –∞–∫—Ç–∏–≤–µ–Ω."

def run_flask():
    port = int(os.getenv('PORT', 8080))
    logger.info(f"üöÄ Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    logger.info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    t = Thread(target=run_flask, daemon=True)
    t.start()

# === –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries ===
def search_wb(query: str) -> list:
    if not query.strip():
        return []

    url = "https://search.wb.ru/exactmatch/ru/common/v4/search"
    params = {
        "query": query.strip(),
        "resultset": "catalog",
        "limit": 20,
        "page": 1
    }
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        "Accept": "application/json",
        "Referer": "https://www.wildberries.ru",
        "X-Requested-With": "XMLHttpRequest"
    }

    try:
        response = requests.get(url, params=params, headers=headers, timeout=10)
        if response.status_code != 200:
            logger.warning(f"‚ùå Wildberries –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return []

        data = response.json()
        products = data.get("data", {}).get("products", [])
        results = []

        for p in products[:20]:
            price_u = p.get("salePriceU")
            if not price_u:
                continue

            price = price_u // 100
            reviews = p.get("reviewCount", 0)
            name = p.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            product_id = p.get("id")
            link = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"

            # –§–∏–ª—å—Ç—Ä—ã
            if len(name) > 100 or any(word in name.lower() for word in ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—Å–∞–º–æ–≤—ã–≤–æ–∑"]):
                continue

            results.append({
                "name": name[:80] + "..." if len(name) > 80 else name,
                "price": price,
                "reviews": reviews,
                "link": link
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –æ—Ç–∑—ã–≤–∞–º (‚Üì), –ø–æ—Ç–æ–º —Ü–µ–Ω–∞ (‚Üë)
        results.sort(key=lambda x: (-x["reviews"], x["price"]))
        return results[:5]

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return []

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º üî•\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    await update.message.reply_text(
        f"üî• [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        f"üîç –ò—â—É: *{query}*",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    results = search_wb(query)

    if results:
        message = "üèÜ *–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
            message += (
                f"{i}. *{r['name']}*\n"
                f"   üí∞ {r['price']:,.0f} ‚ÇΩ  |  {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤  {stars}\n"
                f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})\n\n"
            )
    else:
        message = (
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ¬ª)\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É (¬´–Ω–∞—É—à–Ω–∏–∫–∏¬ª ‚Üí ¬´–Ω–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ¬ª)"
        )

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è keep-alive
    keep_alive()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –ó–∞–ø—É—Å–∫ polling
    try:
        asyncio.run(application.run_polling())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
