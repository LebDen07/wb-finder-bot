# bot.py
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

if not OPENROUTER_API_KEY:
    logger.error("‚ùó OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://openrouter.ai/keys")
else:
    logger.info("‚úÖ OPENROUTER_API_KEY –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –ó–∞–ø—Ä–æ—Å –∫ –ò–ò —á–µ—Ä–µ–∑ OpenRouter ===
def ai_query(prompt: str, history: str = "") -> str:
    try:
        response = requests.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "qwen/qwen2.5-7b-instruct",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries. –ó–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í –∫–æ–Ω—Ü–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å."},  # noqa: E501
                    {"role": "user", "content": history + "\n\n" + prompt}
                ]
            },
            timeout=15
        )
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å: –Ω–∞—É—à–Ω–∏–∫–∏, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –∏ —Ç.–¥."

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    context.user_data["history"] = ""

    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="start_chat")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *—É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫* –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –Ω–∞–π—Ç–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ.\n\n"
        "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ *–ò—â—É –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –±–µ–≥–∞*\n"
        "‚Ä¢ *–ù—É–∂–Ω—ã –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è –ø–∞—Ä–Ω—è –¥–æ 5000‚ÇΩ*",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    if len(user_message) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    history = context.user_data.get("history", "")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ò–ò
    ai_response = ai_query(user_message, history)

    # –ï—Å–ª–∏ –ò–ò –≤–µ—Ä–Ω—É–ª –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏—Å–∫–æ–º—ã–π –∑–∞–ø—Ä–æ—Å
    if any(kw in ai_response.lower() for kw in ["–Ω–∞—É—à–Ω–∏–∫–∏", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "–∏—â—É", "–Ω–∞–π–¥–∏", "–ø–æ–¥–±–µ—Ä–∏", "–ø–æ–∫–∞–∂–∏", "—Ä–µ–∫–æ–º–µ–Ω–¥—É–π"]):
        # –ß–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç
        search_query = "".join(c for c in ai_response if c.isalnum() or c in " -.")
        search_query = search_query.replace("–ò—â—É ", "").replace("–ù–∞–π–¥–∏ ", "").replace("–ü–æ–¥–±–µ—Ä–∏ ", "").strip()
        if len(search_query) < 2:
            search_query = user_message  # —Ä–µ–∑–µ—Ä–≤

        # –ö–æ–¥–∏—Ä—É–µ–º –¥–ª—è URL
        encoded_query = urllib.parse.quote(search_query)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å, —Ä–µ–π—Ç–∏–Ω–≥ ‚â• 4.7
        wb_link = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}&sort=popular&rating=4.7"

        message = (
            "üîç –Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ: *{query}*\n\n"
            "üèÜ –í–æ—Ç –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Wildberries:\n"
            "‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏\n"
            "‚≠ê –†–µ–π—Ç–∏–Ω–≥: –æ—Ç 4.7\n"
            "üí¨ –ú–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤\n\n"
            "üõí [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º]({link})"
        ).format(query=search_query, link=wb_link)
    else:
        message = ai_response
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data["history"] += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}"

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=False)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω—ã –ª–∏ —Ç–æ–∫–µ–Ω—ã
    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    elif not OPENROUTER_API_KEY:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
