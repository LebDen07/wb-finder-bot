# bot.py
import os
import asyncio
import csv
import threading
import logging  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logging
import urllib.parse  # ‚úÖ –î–ª—è build_wb_link
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# üî• –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID (—É–∑–Ω–∞–π —É @userinfobot)
ADMIN_ID = 954944438

if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã Render –Ω–µ "—É–±–∏–ª" –ø—Ä–æ—Ü–µ—Å—Å) ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
user_ids = set()  # –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
user_last_request = {}  # –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists("search_log.csv"):
    with open("search_log.csv", "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["timestamp", "user_id", "username", "query"])

def log_search(user_id, username, query):
    """–õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with open("search_log.csv", "a", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([datetime.now(), user_id, username, query])

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –±–µ–∑ aff_id ===
def build_wb_link(query: str, params: dict) -> str:
    base = "https://www.wildberries.ru/catalog/0/search.aspx"
    all_params = {**params, "search": query}
    encoded = urllib.parse.urlencode(all_params)
    return f"{base}?{encoded}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    user_ids.add(user_id)

    # –ö–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")],
        [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+uGrNl01GXGI4NjI6")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    query = update.message.text.strip()

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    now = time.time()
    if user_id in user_last_request and now - user_last_request[user_id] < 5:
        await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.")
        return
    user_last_request[user_id] = now

    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.2)

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    log_search(user_id, username, query)

    # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    encoded_query = urllib.parse.quote(query)

    # –ö–Ω–æ–ø–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("1. –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂", url=build_wb_link(encoded_query, {"page": "1", "sort": "popular"}))],
        [InlineKeyboardButton("2. –ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è", url=build_wb_link(encoded_query, {"page": "1", "sort": "rate", "priceU": "10000;1000000"}))],
        [InlineKeyboardButton("3. –ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", url=build_wb_link(encoded_query, {"page": "1", "priceU": "0;3000"}))],
        [InlineKeyboardButton("4. –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", url=build_wb_link(encoded_query, {"page": "1", "rating": "4.9"}))],
        [InlineKeyboardButton("5. –•–∏—Ç —Å–µ–∑–æ–Ω–∞", url=build_wb_link(encoded_query, {"page": "1", "sort": "popular", "dest": "-1257786"}))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = (
        f"üîç *–í—ã –∏—Å–∫–∞–ª–∏:* `{query}`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞:"
    )
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)

# === –ö–æ–º–∞–Ω–¥–∞ /stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with open("search_log.csv", "r", encoding="utf-8") as f:
            lines = f.readlines()
        count = len(lines) - 1  # –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        last_searches = "".join(lines[-5:]) if len(lines) > 1 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        await update.message.reply_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {count}\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5:\n{last_searches}"
        )
    except FileNotFoundError:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∏—Å–∫–µ.")

# === –ö–æ–º–∞–Ω–¥–∞ /broadcast (—Ä–∞—Å—Å—ã–ª–∫–∞) ===
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    if not context.args:
        await update.message.reply_text("UsageId: /broadcast –ü—Ä–∏–≤–µ—Ç! –°–∫–∏–¥–∫–∏ –Ω–∞ –Ω–∞—É—à–Ω–∏–∫–∏!")
        return

    message = " ".join(context.args)
    success = 0
    failed = 0

    for uid in user_ids.copy():
        try:
            await context.bot.send_message(chat_id=uid, text=message)
            success += 1
        except Exception as e:
            logger.warning(f"Failed to send to {uid}: {e}")
            failed += 1
            user_ids.discard(uid)

    await update.message.reply_text(f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "–ü–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏!\n\n"
        "üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: [–õ—É—á—à–µ–µ —Å Wildberries](https://t.me/+uGrNl01GXGI4NjI6)",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# === –ö–æ–º–∞–Ω–¥–∞ /donate ===
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç–∏—é –±–æ—Ç–∞:\n"
        "–°–±–µ—Ä: `2202 2002 1234 5678`\n"
        "–∏–ª–∏ [–∫–æ—Ñ–µ –Ω–∞ QR-–∫–æ–¥](https://example.com/donate-qr.png)",
        disable_web_page_preview=True
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CommandHandler("stats", stats))
        app.add_handler(CommandHandler("broadcast", broadcast))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("donate", donate))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling(drop_pending_updates=True)

