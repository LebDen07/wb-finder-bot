# bot.py
import os
import sys
import requests
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python ‚Äî –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
print(f"üêç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python: {sys.version}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("‚ùó –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Render.")
    sys.exit(1)
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive (Render –Ω–µ "—É—Å—ã–ø–ª—è–µ—Ç" —Å–µ—Ä–≤–∏—Å) ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "üü¢ Wildberries Search Bot –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run_flask():
    port = int(os.getenv('PORT', 10000))
    logger.info(f"üöÄ Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    logger.info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    t = Thread(target=run_flask, daemon=True)
    t.start()

# === –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ Wildberries (–û–ë–ù–û–í–õ–Å–ù–ù–´–ô, –†–ê–ë–û–ß–ò–ô –Ω–∞ 2025) ===
def search_wb(query: str) -> list:
    if not query.strip():
        return []

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π URL (–Ω–∞ 2025)
    url = "https://search.wb.ru/exactmatch/ru/common/v4/search"

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    alt_urls = [
        "https://wbxsearch.wb.ru/exactmatch/ru/common/v4/search",  # –ó–µ—Ä–∫–∞–ª–æ
        "https://search.wb.ru/exactmatch/ru/male/v4/search",      # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
    ]

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "query": query.strip(),
        "resultset": "items",
        "limit": 100,
        "page": 1,
        "dest": -1257786,  # –†–æ—Å—Å–∏—è
        "spp": 30,         # –°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
        "lang": "ru",
        "locale": "ru",
        "curr": "rub"
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        "Accept": "application/json",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Referer": "https://www.wildberries.ru/",
        "Origin": "https://www.wildberries.ru",
        "Connection": "keep-alive",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "cross-site",
        "X-Requested-With": "XMLHttpRequest",
        "Cache-Control": "no-cache"
    }

    # –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π URL –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    urls_to_try = [url] + alt_urls

    for attempt, current_url in enumerate(urls_to_try, 1):
        try:
            logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ó–∞–ø—Ä–æ—Å –∫ {current_url}")
            response = requests.get(current_url, params=params, headers=headers, timeout=12)

            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code} | URL: {response.url}")

            if response.status_code == 200:
                data = response.json()
                products = data.get("data", {}).get("products", [])
                if products:
                    logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    break
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
                    continue
            else:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ API (—Å—Ç–∞—Ç—É—Å {response.status_code}) –Ω–∞ URL {current_url}")
                continue
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {current_url}: {e}")
            continue
    else:
        logger.error("‚ùå –í—Å–µ URL –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return []

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    results = []
    for p in products[:50]:
        price_u = p.get("salePriceU") or p.get("priceU") or p.get("finalPriceU")
        if not price_u:
            continue

        price = price_u // 100
        reviews = p.get("feedbackCount", 0)
        name = p.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") or p.get("product")
        brand = p.get("brand", "").strip()
        product_id = p.get("id")
        if not product_id:
            continue

        full_name = f"{brand} {name}".strip()
        link = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º—É—Å–æ—Ä–∞
        if len(full_name) > 100 or any(word in full_name.lower() for word in ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—Å–∞–º–æ–≤—ã–≤–æ–∑", "–ø–æ–¥ –∑–∞–∫–∞–∑"]):
            continue

        results.append({
            "name": full_name[:80] + "..." if len(full_name) > 80 else full_name,
            "price": price,
            "reviews": reviews,
            "link": link
        })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –æ—Ç–∑—ã–≤–∞–º (‚Üì), –ø–æ—Ç–æ–º —Ü–µ–Ω–∞ (‚Üë)
    results.sort(key=lambda x: (-x["reviews"], x["price"]))
    return results[:5]
# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º üî•\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
    await update.message.reply_text(
        f"üî• [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        f"üîç –ò—â—É: *{query}*",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã
    results = search_wb(query)

    if results:
        message = "üèÜ *–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
            message += (
                f"{i}. *{r['name']}*\n"
                f"   üí∞ {r['price']:,.0f} ‚ÇΩ  |  {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤  {stars}\n"
                f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})\n\n"
            )
    else:
        message = (
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ¬ª)\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É (¬´–Ω–∞—É—à–Ω–∏–∫–∏¬ª ‚Üí ¬´–Ω–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ¬ª)\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"
        )

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è keep-alive
    keep_alive()

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –ó–∞–ø—É—Å–∫ polling
    try:
        asyncio.run(application.run_polling())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
