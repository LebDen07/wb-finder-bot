# bot.py
import os
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ChatAction
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –î–ª—è –ò–ò (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

CHANNEL_LINK = "https://t.me/+uGrNl01GXGI4NjI6"
SEARCH_BASE = "https://www.wildberries.ru/catalog/0/search.aspx?"

if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
user_data = {}

# === –ü—Ä–∏–º–µ—Ä "—É–º–Ω–æ–≥–æ" –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ===
def build_wb_link(query: str, rating: str = "4.7", sort: str = "popular", max_price: str = None) -> str:
    params = {
        "search": query,
        "sort": sort,
        "rating": rating.replace("–æ—Ç ", "")
    }
    if max_price:
        params["price"] = f"0;{max_price}"
    encoded = urllib.parse.urlencode(params)
    return f"https://www.wildberries.ru/catalog/0/search.aspx?{encoded}"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø-5 —Å—Å—ã–ª–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API) ===
def get_top5_links(query: str) -> list:
    base = query.replace(" ", "+")
    return [
        {"name": f"üî• {query.capitalize()} ‚Äî –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂", "price": 2999, "reviews": 150, "link": build_wb_link(base, "4.7")},
        {"name": f"üíé {query.capitalize()} ‚Äî –ü—Ä–µ–º–∏—É–º", "price": 4599, "reviews": 98, "link": build_wb_link(base, "4.8")},
        {"name": f"üí∞ {query.capitalize()} ‚Äî –ë—é–¥–∂–µ—Ç", "price": 1899, "reviews": 220, "link": build_wb_link(base, "4.5", max_price="3000")},
        {"name": f"‚≠ê {query.capitalize()} ‚Äî –° –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º", "price": 3499, "reviews": 176, "link": build_wb_link(base, "4.9")},
        {"name": f"üì¶ {query.capitalize()} ‚Äî –•–∏—Ç —Å–µ–∑–æ–Ω–∞", "price": 3999, "reviews": 301, "link": build_wb_link(base, "4.7", "new")}
    ]

# === –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (—á–µ—Ä–µ–∑ OpenRouter) ===
def ai_understand(text: str) -> dict:
    if not OPENROUTER_API_KEY:
        return {"intent": "search", "query": text, "budget": None, "rating": "4.7"}

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": "qwen/qwen2.5-7b-instruct",
                "messages": [
                    {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª–∏: —á—Ç–æ –∏—â–µ—Ç, –±—é–¥–∂–µ—Ç, —Ä–µ–π—Ç–∏–Ω–≥. –í–µ—Ä–Ω–∏ JSON: {query, budget, rating}"},
                    {"role": "user", "content": text}
                ]
            },
            timeout=10
        )
        result = response.json()
        content = result["choices"][0]["message"]["content"]
        import json
        return json.loads(content.replace("'", '"'))
    except Exception as e:
        logger.error(f"‚ùå –ò–ò –æ—à–∏–±–∫–∞: {e}")
        return {"query": text, "budget": None, "rating": "4.7"}

# === /start ‚Äî –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {"step": "start"}

    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="search")],
        [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–∏—Å–∫—É –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º ‚≠ê\n"
        "üí∞ *–õ—É—á—à–∏–µ —Ü–µ–Ω—ã* –∏ —Å–∫–∏–¥–∫–∏ üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå *–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:* [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏! üî•\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if query.data == "search":
        await query.edit_message_text("–ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ? –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: *–Ω–∞—É—à–Ω–∏–∫–∏*, *–∫—Ä–æ—Å—Å–æ–≤–∫–∏*, *power bank*", parse_mode="Markdown")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if len(text) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    time.sleep(1.5)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
    await update.message.reply_text(
        f"üîç *–ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è:* `{text}`\n"
        f"‚≠ê *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:* `4.7`",
        parse_mode="Markdown"
    )

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò
    ai_result = ai_understand(text)
    search_query = ai_result.get("query", text)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5
    results = get_top5_links(search_query)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    for i, r in enumerate(results, 1):
        stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
        message = (
            f"{i}. *{r['name']}*\n"
            f"   üí∞ {r['price']:,} ‚ÇΩ  |  {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤  {stars}\n"
            f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})"
        )
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text=message,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )

    # –ö–Ω–æ–ø–∫–∞ "–ï—â—ë"
    keyboard = [[InlineKeyboardButton("üîÑ –ò—Å–∫–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="search")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text="‚úÖ –ì–æ—Ç–æ–≤–æ! –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –µ—â—ë?",
        reply_markup=reply_markup
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
