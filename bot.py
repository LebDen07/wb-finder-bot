# bot.py
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, CallbackContext
from flask import Flask
from threading import Thread
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
CATEGORIES = {
    "–ù–∞—É—à–Ω–∏–∫–∏": {
        "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ": "–Ω–∞—É—à–Ω–∏–∫–∏+–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ",
        "–ü—Ä–æ–≤–æ–¥–Ω—ã–µ": "–Ω–∞—É—à–Ω–∏–∫–∏+–ø—Ä–æ–≤–æ–¥–Ω—ã–µ",
        "–í–∫–ª–∞–¥—ã—à–∏": "–Ω–∞—É—à–Ω–∏–∫–∏+–≤–∫–ª–∞–¥—ã—à–∏",
        "–ù–∞–∫–ª–∞–¥–Ω—ã–µ": "–Ω–∞—É—à–Ω–∏–∫–∏+–Ω–∞–∫–ª–∞–¥–Ω—ã–µ"
    },
    "–ö—Ä–æ—Å—Å–æ–≤–∫–∏": {
        "–ú—É–∂—Å–∫–∏–µ": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏+–º—É–∂—Å–∫–∏–µ",
        "–ñ–µ–Ω—Å–∫–∏–µ": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏+–∂–µ–Ω—Å–∫–∏–µ",
        "–î–µ—Ç—Å–∫–∏–µ": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏+–¥–µ—Ç—Å–∫–∏–µ",
        "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ": "–∫—Ä–æ—Å—Å–æ–≤–∫–∏+—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ"
    },
    "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã": {
        "–î–æ 20000‚ÇΩ": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω+–¥–æ+20000",
        "–î–æ 30000‚ÇΩ": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω+–¥–æ+30000",
        "–§–ª–∞–≥–º–∞–Ω—ã": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω+—Ñ–ª–∞–≥–º–∞–Ω",
        "5G": "—Å–º–∞—Ä—Ç—Ñ–æ–Ω+5g"
    }
}

# === –ù–∞—á–∞–ª–æ: /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for category in CATEGORIES:
        keyboard.append([InlineKeyboardButton(category, callback_data=f"cat_{category}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data.startswith("cat_"):
        category = data.replace("cat_", "")
        context.user_data['category'] = category

        keyboard = []
        for subcat, query_str in CATEGORIES[category].items():
            keyboard.append([InlineKeyboardButton(subcat, callback_data=f"sub_{query_str}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_start")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{category}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup, parse_mode="Markdown")

    elif data.startswith("sub_"):
        search_query = data.replace("sub_", "")
        context.user_data['search_query'] = search_query

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        encoded_query = search_query.replace(" ", "+")
        wb_link = f"https://www.wildberries.ru/catalog/0/search.aspx?search={encoded_query}&sort=popular&rating=4.7"

        # –ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥, –Ω–æ –ø–æ–∫–∞ mock)
        product = {
            "title": f"–õ—É—á—à–∏–µ {search_query.replace('+', ' ')}",
            "price": "–æ—Ç 1999‚ÇΩ",
            "rating": "4.8",
            "reviews": "150+",
            "image": "https://via.placeholder.com/200x200.png?text=WB"
        }

        message = (
            f"üîç *–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* `{search_query}`\n\n"
            f"üõçÔ∏è *{product['title']}*\n"
            f"üí∞ –¶–µ–Ω–∞: *{product['price']}*\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: *{product['rating']}* ({product['reviews']} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
            f"[üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º]({wb_link})"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="back_start")],
            [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+uGrNl01GXGI4NjI6")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown", disable_web_page_preview=False)

    elif data == "back_start":
        await start(update, context)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()

    if not TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
