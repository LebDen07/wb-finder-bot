# bot.py
import os
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ò–ò

# üîó –°—Å—ã–ª–∫–∏
CHANNEL_LINK = "https://t.me/+uGrNl01GXGI4NjI6"
SEARCH_BASE = "https://www.wildberries.ru/catalog/0/search.aspx?"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—á—Ç–æ–±—ã Render –Ω–µ "—É–±–∏–ª" –ø—Ä–æ—Ü–µ—Å—Å) ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
user_data = {}

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ===
def build_wb_link(query: str, rating: str = "4.7", sort: str = "popular", max_price: str = None) -> str:
    params = {
        "search": query,
        "sort": sort,
        "rating": rating.replace("–æ—Ç ", "")
    }
    if max_price:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: 0 –¥–æ max_price
        params["priceU"] = f"0;{max_price}"
    encoded = urllib.parse.urlencode(params)
    return f"https://www.wildberries.ru/catalog/0/search.aspx?{encoded}"

# === –ü—Ä–∏–º–µ—Ä —Ç–æ–ø-5 —Å—Å—ã–ª–æ–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API –ø–æ–∑–∂–µ) ===
def get_top5_links(query: str) -> list:
    base = query.replace(" ", "+")
    return [
        {
            "name": f"üî• {query.capitalize()} ‚Äî –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂",
            "price": 2999,
            "reviews": 150,
            "link": build_wb_link(base, "4.7")
        },
        {
            "name": f"üíé {query.capitalize()} ‚Äî –ü—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—è",
            "price": 4599,
            "reviews": 98,
            "link": build_wb_link(base, "4.8")
        },
        {
            "name": f"üí∞ {query.capitalize()} ‚Äî –ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
            "price": 1899,
            "reviews": 220,
            "link": build_wb_link(base, "4.5", max_price="3000")
        },
        {
            "name": f"‚≠ê {query.capitalize()} ‚Äî –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
            "price": 3499,
            "reviews": 176,
            "link": build_wb_link(base, "4.9")
        },
        {
            "name": f"üì¶ {query.capitalize()} ‚Äî –•–∏—Ç —Å–µ–∑–æ–Ω–∞",
            "price": 3999,
            "reviews": 301,
            "link": build_wb_link(base, "4.7", "new")
        }
    ]

# === –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {"step": "start"}

    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="search")],
        [InlineKeyboardButton("üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏! üî•\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if query.data == "search":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if len(text) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    time.sleep(1.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    await update.message.reply_text(
        f"üî• [*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
        f"üîç –ò—â—É: *{text}*",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Å—Å—ã–ª–æ–∫
    results = get_top5_links(text)

    if results:
        message = "üèÜ *–¢–æ–ø-5 —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
            message += (
                f"{i}. *{r['name']}*\n"
                f"   üí∞ {r['price']:,} ‚ÇΩ  |  {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤  {stars}\n"
                f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({r['link']})\n\n"
            )
    else:
        message = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
