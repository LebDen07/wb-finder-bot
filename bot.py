# bot.py
import os
import sys
import requests
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

print(f"üêç Python: {sys.version}")

# –¢–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    sys.exit(1)

# === Flask –¥–ª—è keep-alive ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
    port = int(os.getenv('PORT', 10000))
    app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()

# === –ü–æ–∏—Å–∫ –¢–û–ü-—Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É (–∫–∞–∫ –Ω–∞ tags/obuvi) ===
def search_wb(query: str) -> list:
    if not query.strip():
        return []

    # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    keyword = urllib.parse.quote(query.strip())

    # üî• –†–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç 2025 ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö WB
    url = f"https://catalog.wb.ru/catalog/autosearch/data"

    params = {
        "query": query.strip(),
        "dest": -1257786,  # –†–æ—Å—Å–∏—è
        "lang": "ru",
        "curr": "rub",
        "limit": 100,
        "page": 1
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        "Accept": "application/json",
        "Referer": "https://www.wildberries.ru/",
        "Origin": "https://www.wildberries.ru",
        "X-Requested-With": "XMLHttpRequest"
    }

    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫: {url}?query={query}")
        response = requests.get(url, params=params, headers=headers, timeout=10)

        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code != 200:
            return []

        data = response.json()
        products = data.get("data", {}).get("products", [])

        if not products:
            logger.warning("üì¶ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            return []

        results = []
        seen_ids = set()  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏

        for p in products:
            product_id = p.get("id")
            if not product_id or product_id in seen_ids:
                continue
            seen_ids.add(product_id)

            price_u = p.get("priceU") or p.get("salePriceU")
            if not price_u:
                continue

            price = price_u // 100
            reviews = p.get("feedbacks", 0)
            name = p.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            brand = p.get("brand", "").strip()
            full_name = f"{brand} {name}".strip()
            link = f"https://www.wildberries.ru/catalog/{product_id}/detail.aspx"

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if len(full_name) > 100 or any(word in full_name.lower() for word in ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—Å–∞–º–æ–≤—ã–≤–æ–∑"]):
                continue

            results.append({
                "name": full_name[:80] + "..." if len(full_name) > 80 else full_name,
                "price": price,
                "reviews": reviews,
                "link": link
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–æ—Ç–∑—ã–≤–∞–º) ‚Üí —Ü–µ–Ω–∞
        results.sort(key=lambda x: (-x["reviews"], x["price"]))
        return results[:5]  # –¢–û–ü-5

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return []

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")
    reply_markup = InlineKeyboardMarkup([keyboard])

    await update.message.reply_text(
        "üéâ *–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ Wildberries!* üõçÔ∏è\n\n"
        "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
        "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
        "üí∞ *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏* –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã üí∏\n"
        "üì¶ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã* –æ—Ç —Ç—ã—Å—è—á –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
        "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: *–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n"
        "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ –ø–æ –ø–æ–∫—É–ø–∫–∞–º üî•\n\n"
        "üöÄ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å —É–∂–µ —Å–µ–π—á–∞—Å!",
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
    await update.message.reply_text(
        f"üî• *–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n"
        f"üîç –ò—â—É *–¢–û–ü–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*",
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    # –ò—â–µ–º
    results = search_wb(query)

    if results:
        message = "üèÜ *–¢–û–ü-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ Wildberries:*\n\n"
        for i, r in enumerate(results, 1):
            stars = "‚≠ê" * min(5, max(1, r['reviews'] // 50))
            message += (
                f"{i}. *{r['name']}*\n"
                f" üí∞ {r['price']:,} ‚ÇΩ | {r['reviews']} –æ—Ç–∑—ã–≤–æ–≤ {stars}\n"
                f" üîó –ü–µ—Ä–µ–π—Ç–∏({r['link']})\n\n"
            )
    else:
        message = (
            "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ¬ª)\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É (¬´–Ω–∞—É—à–Ω–∏–∫–∏¬ª ‚Üí ¬´–Ω–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ¬ª)\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ ‚Äî –∏–Ω–æ–≥–¥–∞ WB –≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã"
        )

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()

    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

    try:
        asyncio.run(application.run_polling())
    except KeyboardInterrupt:
        logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
