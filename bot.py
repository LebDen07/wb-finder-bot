# bot.py
import os
import sys
import requests
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
 format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
 level=logging.INFO
)
logger = logging.getLogger(__name__)

print(f"üêç Python: {sys.version}")

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
 logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
 sys.exit(1)

# === Flask –¥–ª—è keep-alive ===
app_flask = Flask('')

@app_flask.route('/')
def home():
 return "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run_flask():
 port = int(os.getenv('PORT', 10000))
 app_flask.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def keep_alive():
 t = Thread(target=run_flask, daemon=True)
 t.start()

# === –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ OZON —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ===
def search_ozon(query: str) -> list:
 if not query.strip():
 return 

 logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–∞ OZON: '{query}'")
 encoded_query = urllib.parse.quote(query.strip())
 proxy_url = f"https://ozon-api-proxy.vercel.app/api/search?q={encoded_query}"

 try:
 response = requests.get(
 proxy_url,
 timeout=15,
 headers={
 "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
 "Accept": "application/json",
 "Referer": "https://ozon-api-proxy.vercel.app"
 }
 )

 logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏: {response.status_code}")

 if response.status_code != 200:
 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {response.status_code}")
 return None

 data = response.json()

 if not data.get("products") or not isinstance(data"products", list):
 logger.warning("üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω")
 return 

 products = data"products"
 result = 
 seen_ids = set()

 for p in products:50:
 try:
 pid = p.get("id")
 if not pid or pid in seen_ids:
 continue
 seen_ids.add(pid)

 price = p.get("price")
 if not price or price <= 0:
 continue

 reviews = p.get("reviews", 0)
 name = p.get("name", "").strip()
 brand = p.get("brand", "").strip()
 if not name:
 continue

 full_name = f"{brand} {name}".strip()
 if len(full_name) > 80:
 full_name = full_name:77 + "..."

 # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä OZON
 link = f"https://www.ozon.ru/product/{pid}/"

 result.append({
 "name": full_name,
 "price": price,
 "reviews": reviews,
 "link": link
 })
 except (TypeError, ValueError, AttributeError):
 continue

 if not result:
 return 

 # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–æ –æ—Ç–∑—ã–≤–∞–º (‚Üì), —Ü–µ–Ω–∞ (‚Üë)
 result.sort(key=lambda x: (-x"reviews", x"price"))
 return result:5 # –¢–û–ü-5

 except Exception as e:
 logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OZON –ø—Ä–æ–∫—Å–∏: {e}")
 return None

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
 keyboard = InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")
 reply_markup = InlineKeyboardMarkup(keyboard)

 await update.message.reply_text(
 "üéâ *–ü—Ä–∏–≤–µ—Ç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –ª—É—á—à–∏—Ö —Ü–µ–Ω –Ω–∞ OZON!* üõçÔ∏è\n\n"
 "üî• –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å:\n"
 "‚úÖ *–¢–æ–ø–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* —Å –≤—ã—Å–æ–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ ‚≠ê\n"
 "üí∞ *–õ—É—á—à–∏–µ —Ü–µ–Ω—ã* –∏ —Å–∫–∏–¥–∫–∏ üí∏\n"
 "üì¶ *–ú–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–æ–≤* ‚Äî –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ç—ã—Å—è—á–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π üì£\n\n"
 "üìå –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: *–õ—É—á—à–µ–µ —Å OZON | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n"
 "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ üî•\n\n"
 "üöÄ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å!",
 parse_mode="Markdown",
 disable_web_page_preview=True,
 reply_markup=reply_markup
 )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
 query = update.callback_query
 await query.answer()
 if query.data == "start_searching":
 await query.edit_message_text(
 "–û—Ç–ª–∏—á–Ω–æ üî•\n"
 "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –Ω–∞ OZON.\n\n"
 "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
 "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
 "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
 "‚Ä¢ Power Bank"
 )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
 query = update.message.text.strip()
 if len(query) < 2:
 await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.")
 return

 # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
 await update.message.reply_text(
 f"üî• *–õ—É—á—à–µ–µ —Å OZON | DenShop1*(https://t.me/+uGrNl01GXGI4NjI6)\n"
 f"üîç –ò—â—É *–¢–û–ü–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã* –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*",
 parse_mode="Markdown",
 disable_web_page_preview=True
 )

 # –ò—â–µ–º
 results = search_ozon(query)

 # === –§–û–õ–ë–≠–ö: –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª ===
 if results is None:
 encoded_query = urllib.parse.quote(query)
 ozon_link = f"https://www.ozon.ru/search/?text={encoded_query}"

 await update.message.reply_text(
 f"‚ö†Ô∏è *–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n"
 f"–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Ä—É—á–Ω—É—é:\n\n"
 f"üîç *{query} –Ω–∞ OZON*\n"
 f"üîó –ü–µ—Ä–µ–π—Ç–∏({ozon_link})\n\n"
 f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
 ,
 parse_mode="Markdown",
 disable_web_page_preview=True
 )

 elif results:
 message = "üèÜ *–¢–û–ü-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ OZON:*\n\n"
 for i, r in enumerate(results, 1):
 stars = "‚≠ê" * min(5, max(1, r'reviews' // 50))
 message += (
 f"{i}. *{r'name'}*\n"
 f" üí∞ {r'price':,} ‚ÇΩ | {r'reviews'} –æ—Ç–∑—ã–≤–æ–≤ {stars}\n"
 f" üîó –ü–µ—Ä–µ–π—Ç–∏({r'link'})\n\n"
 )
 await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

 else:
 await update.message.reply_text(
 "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
 "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–∫—Ä–æ—Å—Å–æ–≤–∫–∏ –º—É–∂—Å–∫–∏–µ¬ª)\n"
 "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É (¬´–Ω–∞—É—à–Ω–∏–∫–∏¬ª ‚Üí ¬´–Ω–∞—É—à–Ω–∏–∫–∏ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ¬ª)\n"
 "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
 )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
 keep_alive()

 logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è OZON...")
 application = Application.builder().token(TOKEN).build()

 application.add_handler(CommandHandler("start", start))
 application.add_handler(CallbackQueryHandler(button_handler))
 application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

 logger.info("‚úÖ –ë–æ—Ç –¥–ª—è OZON –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

 try:
 asyncio.run(application.run_polling())
 except KeyboardInterrupt:
 logger.info("üí§ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
 except Exception as e:
 logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
