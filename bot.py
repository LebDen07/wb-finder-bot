# bot.py
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from flask import Flask
from threading import Thread
import logging
import urllib.parse
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_LINK = "https://t.me/+uGrNl01GXGI4NjI6"

if not TELEGRAM_TOKEN:
    logger.error("‚ùó TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
else:
    logger.info("‚úÖ TELEGRAM_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

# === Flask –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "‚ú® –ë–æ—Ç –¥–ª—è Wildberries —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7"

def run():
    port = int(os.getenv('PORT', 8080))
    app_flask.run(host='0.0.0.0', port=port)

def keep_alive():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä...")
    t = Thread(target=run)
    t.daemon = True
    t.start()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===
def build_wb_link(query: str, sort: str = None, rating: str = None) -> str:
    base = "https://www.wildberries.ru/catalog/0/search.aspx"
    
    # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π dest (–†–æ—Å—Å–∏—è)
    params = {
        "search": query,
        "dest": "-1257786"
    }
    
    if sort:
        params["sort"] = sort
    if rating:
        params["rating"] = rating

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ %20)
    encoded_params = urllib.parse.urlencode(params, quote_via=urllib.parse.quote)
    return f"{base}?{encoded_params}"

# === –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.2)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 1
    await context.bot.send_message(
        chat_id=chat_id,
        text="üí´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤...",
        parse_mode="Markdown"
    )
    await asyncio.sleep(0.8)

    # –°–æ–æ–±—â–µ–Ω–∏–µ 2 ‚Äî —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª
    await context.bot.send_message(
        chat_id=chat_id,
        text=(
            "üõí *–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç –≤ –†–æ—Å—Å–∏–∏, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ WB*\n\n"
            "üìå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:\n"
            "[*–õ—É—á—à–µ–µ —Å Wildberries | DenShop1*](https://t.me/+uGrNl01GXGI4NjI6)\n"
            "–¢–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏! üî•"
        ),
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await asyncio.sleep(1.0)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
    keyboard = [
        [InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_searching")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text="üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤?",
        reply_markup=reply_markup
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "start_searching":
        await query.edit_message_text(
            "–û—Ç–ª–∏—á–Ω–æ! üî•\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ Wildberries.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ù–∞—É—à–Ω–∏–∫–∏ Sony\n"
            "‚Ä¢ –ö—Ä–æ—Å—Å–æ–≤–∫–∏\n"
            "‚Ä¢ Power Bank"
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()

    if len(query) < 2:
        await update.message.reply_text("‚ùå –ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    chat_id = update.effective_chat.id

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.5)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—â–µ–º
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"üîç *–ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è:* `{query}`",
        parse_mode="Markdown"
    )

    # –ï—â—ë —ç—Ñ—Ñ–µ–∫—Ç
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1.8)

    # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    encoded_query = urllib.parse.quote(query)

    # –ö–Ω–æ–ø–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üèÜ 1. –õ–∏–¥–µ—Ä –ø—Ä–æ–¥–∞–∂", url=build_wb_link(encoded_query, sort="popular"))],
        [InlineKeyboardButton("üíé 2. –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ", url=build_wb_link(encoded_query, sort="pricedown"))],
        [InlineKeyboardButton("üí∞ 3. –°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ", url=build_wb_link(encoded_query, sort="priceup"))],
        [InlineKeyboardButton("‚≠ê 4. –í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥", url=build_wb_link(encoded_query, rating="4.9"))],
        [InlineKeyboardButton("üî• 5. –•–∏—Ç —Å–µ–∑–æ–Ω–∞", url=build_wb_link(encoded_query, sort="popular"))],
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", callback_data="start_searching")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    message = (
        f"üéØ *–í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å ¬´{query}¬ª:*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:"
    )

    await context.bot.send_message(
        chat_id=chat_id,
        text=message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask

    if not TELEGRAM_TOKEN:
        logger.error("‚ùó –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è: –Ω–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
    else:
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
        app.run_polling()
